{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###ANSWER (for making sure this gets removed)\n",
    "\n",
    "# Grading Rubric (66 points total)\n",
    "\n",
    "## Part 1 (7 points)\n",
    "\n",
    "* **Question 1.1** (1 point):\n",
    "  * 1 point for creating the GitHub repository directory\n",
    "* **Question 1.2** (1 point):\n",
    "  * 1 point for writing the cloning command\n",
    "* **Question 1.3** (1 point):\n",
    "  * 1 point for creating a new branch\n",
    "* **Question 1.4** (3 points):\n",
    "  * 1 point for having a couple commits\n",
    "  * 2 points for having either something close to the specified commit messages, or somewhat descriptive commit messages\n",
    "* **Question 1.5** (1 point):\n",
    "  * 1 point for merging the branches\n",
    "  \n",
    "## Part 2 (22 points)\n",
    "* **Question 2.1** (1 point):\n",
    "    * 1 point for writing the command(s) to download the files\n",
    "* **Question 2.2** (2 points):\n",
    "    * 1 point for reading in the data\n",
    "    * 1 point for displaying the first 15 rows\n",
    "* **Question 2.3** (5 points):\n",
    "    * 2 points for making a scatter_matrix(), pairplot(), or other similar figure\n",
    "    * 2 points for color coding the points\n",
    "    * 1 point for resizing the figure\n",
    "* **Question 2.4** (2 points):\n",
    "    * 1 point for listing any two of the numerical features as their answer (this is somewhat subjective)\n",
    "    * 1 point if their justification mentions the fact that the classes are separated (or something to that effect)\n",
    "* **Question 2.5** (5 points):\n",
    "    * 1 point for making a scatter plot\n",
    "    * 1 point for plotting the correct quantities\n",
    "    * 1 point for color coding the points\n",
    "    * 2 points for title, axes labels, and legend\n",
    "* **Question 2.6** (3 points):\n",
    "    * Award 3 points for a complete description \n",
    "    * Award 2 points if the description is precise, but \n",
    "    * Award 1 point if the description is too vague for someone to follow, but has some correct ideas\n",
    "    * Award 0 points if the description has \n",
    "* **Question 2.7** (4 points):\n",
    "    * 1 point for filling in the missing column with the strings \"Canadian\", \"Kama\", or \"Rosa\"\n",
    "    * 2 points for using boolean masks or some sort of conditionals to decide \n",
    "    * 1 point if the result is reasonable (The datapoints in the test set were chosen to be far away from any reasonable decision boundary, so most of these points should be classified correctly).\n",
    "    \n",
    "## Part 3 (15 points)\n",
    "* **Question 3.1** (2 points):\n",
    "    * 2 points for having the correct command to install the package correctly and having their `import` statement work\n",
    "* **Question 3.2** (2 points):\n",
    "    * 1 point for having something resembling the example from the Preliminaries section of the tutorial\n",
    "    * 1 point for correctly modifying the example code to compute the integral\n",
    "* **Question 3.3** (2 points):\n",
    "    * 1 point for using the `solve()` or `solveset()` method\n",
    "    * 1 point for doing this part correctly\n",
    "* **Question 3.4** (2 points):\n",
    "    * 1 point for using the `trigsimp()` method (or something equivalent)\n",
    "    * 1 point for doing this part correctly\n",
    "* **Question 3.5** (2 points):\n",
    "    * 1 point for using the `limit()` method (or something equivalent)\n",
    "    * 1 point for doing this part correctly\n",
    "* **Question 3.6** (3 points):\n",
    "    * 1 point for using the `diff()` method (or something equivalent)\n",
    "    * 1 point for properly declaring `c` as a symbol\n",
    "    * 1 point for doing this part correctly\n",
    "* **Question 3.7** (2 points):\n",
    "    * 1 point for using the `integrate()` method (or something equivalent)\n",
    "    * 1 point for doing this part correctly\n",
    "    \n",
    "## Part 4 (22 points)\n",
    "* **Question 4.1** (10 points):\n",
    "    * 2 points for adding the `self` argument to all the methods\n",
    "    * 2 points for changing `balance` to `self.balance` and `name` to `self.name`\n",
    "    * 2 points for changing `self.amount` to `amount`\n",
    "    * 2 points for adding/removing `amount` as an argument\n",
    "    * 2 points for fixing the inequality/equality signs\n",
    "* **Question 4.2** (12 points):\n",
    "    * 1 point for the class line with proper inheritance\n",
    "    * 1 point for having an `__init__()` method\n",
    "    * 1 point for supplying the correct arguments to the `__init__()` method\n",
    "    * 1 point for calling `super().__init__(name)`\n",
    "    * 1 point for adding `ledger` as an attribute\n",
    "    * 1 point for having a `transaction()` method\n",
    "    * 1 point for supplying the correct arguments to the `transaction()` method\n",
    "    * 1 point for making `description` an optional argument\n",
    "    * 1 point for using logic to check if `amount` is positive (or negative)\n",
    "    * 2 points for correctly calling `deposit()` and `withdraw()` with the correct arguments\n",
    "    * 1 point for correctly appending to the ledger"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## <p style=\"text-align: right;\"> &#9989; Put your name here</p>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# CMSE 202 Midterm (Section 003 - Spring 2022)\n",
    "\n",
    "The goal of this midterm is to give you the opportunity to test out some of the skills that you've developed thus far this semester. In particular, you'll practice setting up a GitHub repository, committing and pushing repository changes, downloading data with command line tools, performing some data analysis, possibly using a new Python package, and writing a python class. You should find that you have all of the skills necessary to complete this exam with even just eight weeks of CMSE 202 under your belt!\n",
    "\n",
    "You are encouraged to look through the entire exam before you get started so that you can appropriately budget your time and understand the broad goals of the exam. Once you've read through it, try doing Parts 0 and 1 first so that you have your repository set up and you download all necessary data files as they will be necessary to complete the assigned tasks. Let your instructor know right away if you have problems downloading the data!\n",
    "\n",
    "The exam is set up so that even if you get stuck on one part there are opportunities to get points on the other parts, so consider jumping ahead if you feel like you aren't making progress and then come back later if you have time.\n",
    "\n",
    "If you have any questions during the exam, you may ask the instructor, the TA, or the LA privately. If you are attending in-person, simply raise your hand and one of us will come over to you. If you are attending via-Zoom, please use the ask-for-help feature or privately message the instructor, the TA, or the LA. We will make any announcements or exam clarifications/corrections to the class via the following Google Document.\n",
    "\n",
    "https://docs.google.com/document/d/11wJG12PO7UnABwv9JT2VAMo-tCMT8ArzYjcd7awKAsQ/edit?usp=sharing\n",
    "\n",
    "**Important note about using online resources**: This exam is \"open internet\". That means that you can look up documentation, google how to accomplish certain Python tasks, etc. Being able to effectively use the internet for computational modeling and data science is a very important skill, so we want to make sure you have the opportunity to exercise that skill. **However**: The use of any person-to-person communication software is absolutely not acceptable. If you are seen accessing your email, using a chat program (e.g. Slack), or any sort of collaborative cloud storage or document software (e.g. Google Documents other than the one we will make announcements on), you will be at risk for receiving a zero on the exam.\n",
    "\n",
    "**Keep your eyes on your screen!** Unfortunately, there isn't enough space in the room for everyone to sit at their own table so please do your best to keep your eyes on your own screen. This exam is designed to give *you* the opportunity to show the instructor what you can do and you should hold yourself accountable for maintaining a high level of academic integrity. If any of the instructors observe suspicious behavior, you will, again, risk receiving a zero."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Part 0: Academic integrity statement\n",
    "\n",
    "Read the following statement and edit the markdown text to put your name in the statement. This is your commitment to doing your own authentic work on this exam."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> I, **INSERT NAME HERE**, affirm that this exam represents my own authetic work, without the use of any unpermitted aids or resources or person-to-person communication. I understand that this exam an an opportunity to showcase my own progress in developing and improving my computational skills and have done my best to demonstrate those skills."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--\n",
    "## Part 1: Add to your Git repository to track your progress on your exam (7 points)\n",
    "\n",
    "Before you get to far along in the exam, you're going to add it to the `cmse202-s22-turnin` repository you created in class so that you can track your progress on the exam and preserve the final version that you turn in. In order to do this you need to\n",
    "\n",
    "&#9989; **Question 1.1 [1 point]**: **Do the following**:\n",
    "\n",
    "1. Navigate to your `cmse202-s22-turnin` repository and create a new directory called `midterm`.\n",
    "2. Move this notebook into that **new directory** in your repository, then **add it and commit it to your repository**.\n",
    "1. Finally, to test that everything is working, \"git push\" the file so that it ends up in your GitHub repository.\n",
    "\n",
    "**Important**: Double check you've added your Professor and your TA as collaborators to your \"turnin\" respository (you should have done this in the previous homework assignment).\n",
    "\n",
    "**Also important**: Make sure that the version of this notebook that you are working on is the same one that you just added to your repository! If you are working on a different copy of the noteobok, **none of your changes will be tracked**!\n",
    "\n",
    "If everything went as intended, the file should now show up on your GitHub account in the `cmse202-s22-turnin` repository inside the `midterm` directory that you just created.  Periodically, **you'll be asked to commit your changes to the repository and push them to the remote GitHub location**. Of course, you can always commit your changes more often than that, if you wish.  It can be good to get into a habit of committing your changes any time you make a significant modification, or when you stop working on the project for a bit.\n",
    "\n",
    "&#9989; **Question 1.2 [1 point]**: **Do this**: Before you move on, put the command(s) that your instructor should run to clone your repository in the markdown cell below."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "``` bash\n",
    "# Put the command(s) for cloning your repository here!\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###ANSWER\n",
    "``` bash\n",
    "# Put the command for cloning your repository here!\n",
    "!git clone [URL]\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 1.3 [1 points]**: **Do this**: Before you move on, create a new branch called `midterm_branch` and move into it. (_Note_: your TA will be able to see if you have created the branch and its history).\n",
    "\n",
    "&#9989; **Question 1.4 [3 points]**: **Do this**: After completing each of Part 2, Part 3, and Part 4 below (and possibly more often than that), save your notebook, commit the changes to your Git repository using a descriptive commit message, and push the changes to GitHub. Make sure you are on your the branch called `midterm_branch` when doing this. Note that there are large &#128721; **STOP** signs reminding you to do this after each part.\n",
    "\n",
    "&#9989; **Question 1.5 [1 points]**: **Do this**: After finishing the midterm (or when time is nearly up), merge your `midterm_branch` with your main/master branch, and then push this change to GitHub. There will be a large &#128721; **STOP** sign at the end of the midterm exam reminding you to do this.\n",
    "\n",
    "Some notes: If you choose not to create a new branch to work on the midterm exam, you will not recieve credit for Questions 1.3 and 1.5, but you can still get credit for the rest of the exam. Also, it is ok if a few of your commits are on the wrong branch as long as most of your work was done on `midterm_branch`. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Part 2: Downloading and analyzing unfamiliar data (? points)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###ANSWER (for making sure this gets removed)\n",
    "\n",
    "#### Instructor information\n",
    "\n",
    "The goals for this part of the exam are for students to do the following:\n",
    "\n",
    "1. Download a web-hosted data file using curl (along with stating what command they used)\n",
    "2. Load the dataset using whatever mechanism they choose (or that you want them to use)\n",
    "3. Perform a bit of exploratory data analysis\n",
    "4. Interpret the results of the analysis and explain their finding.\n",
    "\n",
    "This component of the exam should mirror what they were expected to do in Part 2 of Homework #2."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this part of the exam, you will use load and visualize a dataset that you probably have not used before. \n",
    "\n",
    "In particular, you will be working with wheat seed data collected by researchers at the John Paul II Catholic University of Lublin in Poland. They collected data from 210 wheat seeds of three varieties of wheat (Canadian, Kama, and Rosa). For each seed, they took various measurements of the seed and identified its variety. \n",
    "\n",
    "I have split their data into two sets: one called `wheat_classified.csv` and `wheat_unclassified.csv`. In both files, each row (not including the header) has data for one wheat seed. The first file has all of the collected data in each row. In the second file, the variety info is missing, but the rest of the data is there. \n",
    "\n",
    "To get started, you will need to download two files - `wheat_classified.csv` and `wheat_unclassified.csv`. The direct links to these files are:\n",
    "* `https://raw.githubusercontent.com/skarnik1337/cmse202sec003s22midterm/main/wheat_classified.csv`\n",
    "* `https://raw.githubusercontent.com/skarnik1337/cmse202sec003s22midterm/main/wheat_unclassified.csv`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 2.1 [1 point]**: **Do this now:** Save these files in the same directory as your notebook so you can load them directly. **Then, in the cell below, put the command line command(s) you used to download the files.** If you did not use a command line tool to download the files, write down the command(s) that *would* have downloaded the files."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "``` bash\n",
    "# Put the command(s) you used for fetching the data files here!\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "###ANSWER\n",
    "!curl -O https://raw.githubusercontent.com/skarnik1337/cmse202sec003s22midterm/main/wheat_classified.csv\n",
    "!curl -O https://raw.githubusercontent.com/skarnik1337/cmse202sec003s22midterm/main/wheat_unclassified.csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 2.2 [2 points]**: To get started, read in the `wheat_classified.csv` dataset, and then display the first 15 rows. I gently suggest using the `read_csv` method in `Pandas` for this task, but you can use another Python tool if you prefer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Put your code for Question 2.2 here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "###ANSWER\n",
    "import pandas as pd\n",
    "wheat = pd.read_csv(\"wheat_classified.csv\")\n",
    "wheat[:15]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 2.3 [5 points]**: You should notice that the dataset contains seven columns with numerical features, which are called `Area`, `Perimeter`, `Compactness`, `Kernel Length`, `Kernel Width`, `Asymmetry`, and `Groove Length`, as well as one column called `Variety` which has a categorical class label (either `Canadian`, `Kama`, or `Rosa`).\n",
    "\n",
    "**Do the following**: \n",
    "* Use the `scatter_matrix()` method in `Pandas`, or the `pairplot()` method in `seaborn`, or another tool which does something similar to make a figure which has scatter plots for every pair of numerical features. \n",
    "* Color code your data points so that each `Variety` of wheat seed gets a different color. For example, you can make the data points for the Canadian wheat seeds red, the data points for the Kama wheat seeds green, and the data points for the Rosa wheat seeds blue. Of course, you can use whatever three colors you like, so long as they look different enough.\n",
    "* Resize the figure to make it large enough for you to look at. \n",
    "\n",
    "HINT: You may have done something similar in an in-class assignment."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Put your code for Question 2.3 here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "###ANSWER\n",
    "from pandas.plotting import scatter_matrix\n",
    "\n",
    "color_array = {\"Canadian\":'red',\"Kama\":'green',\"Rosa\":'blue'}\n",
    "colors = wheat[\"Variety\"].replace(color_array)\n",
    "scatter_matrix(wheat, c=colors, marker='o', s=10, alpha=.8, figsize=(25,25));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 2.4 [2 points]**: **Do this**: Looking at the plot(s) you made in Question 2.3, which pair of numerical features do you think would be most useful to classify the variety of a wheat seed? Justify your answer. \n",
    "\n",
    "Note, you don't need to supply rigorous mathematical or numerical evidence to justify your answer. A qualitative justification will suffice. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font size=+3>&#9998; Erase the contents of this cell and replace it with your answer to Question 2.4.</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###ANSWER\n",
    "\n",
    "Kernel Length and Groove Width since the scatter plot of those two features seems to do the best job separating the three varieties of wheat."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 2.5 [5 points]**: **Do the following**: \n",
    "\n",
    "* Make a scatterplot with `Groove Length` on the x-axis and the quantity `Kernel Length`-0.8*`Groove Length` on the y-axis.\n",
    "* Color code the dots so that each variety of wheat seed gets a different color. \n",
    "* Label both axes and give the plot a title\n",
    "* Add a legend to indicate what color corresponds to each of the three wheat seed varieties."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Put your code for Question 2.5 here\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "###ANSWER\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "const = 0.8\n",
    "canadian = wheat[wheat[\"Variety\"]==\"Canadian\"]\n",
    "kama = wheat[wheat[\"Variety\"]==\"Kama\"]\n",
    "rosa = wheat[wheat[\"Variety\"]==\"Rosa\"]\n",
    "plt.scatter(canadian[\"Groove Length\"],canadian[\"Kernel Length\"]-const*canadian[\"Groove Length\"],c = 'r',marker='.')\n",
    "plt.scatter(kama[\"Groove Length\"],kama[\"Kernel Length\"]-const*kama[\"Groove Length\"],c = 'g',marker='.')\n",
    "plt.scatter(rosa[\"Groove Length\"],rosa[\"Kernel Length\"]-const*rosa[\"Groove Length\"],c = 'b',marker='.')\n",
    "plt.xlabel(\"Groove Length\")\n",
    "plt.ylabel(\"(Kernel Length)-(0.8*Groove Length)\")\n",
    "plt.title(\"Kernel Length and Groove Length of Wheat Seeds\")\n",
    "plt.legend([\"Canadian\",\"Kama\",\"Rosa\"])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 2.6 [3 points]**: **Do this**: Suppose someone measured the `Groove Length` and `Kernel Length` of a wheat seed, and they wanted to identify which of the three varieties (Canadian, Kama, or Rosa) the wheat seed belongs to based on those two measurements alone. Describe a method they can use to make their identification. Be specific enough so that someone who doesn't have the data or the above plot can make a reasonable guess.\n",
    "\n",
    "Note that while it is extremely difficult to come up with a method that is guaranteed to correctly identify the variety of wheat seed, you should be able to come up with something simple that will work for most of the wheat seeds in `wheat_classified.csv`. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<font size=+3>&#9998; Erase the contents of this cell and replace it with your answer to Question 2.6.</font>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###ANSWER\n",
    "\n",
    "While there are many imperfect possibilities, one reasonable procedure is as follows:\n",
    "1. If the `Groove Length` is >= 5.6, guess that the wheat seed is Rosa.\n",
    "2. If the `Groove Length` is < 5.6, and the `Kernel Length`-0.8*`Groove Length` is > 1.28, guess that the wheat seed is Kama.\n",
    "3. If the `Groove Length` is < 5.6, and the `Kernel Length`-0.8*`Groove Length` is <= 1.28, guess that the wheat seed is Canadian."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 2.7 [4 points]**: **Do this**: In the cell below, read in the `wheat_unclassified.csv` dataset. Then, write code which uses the method you described in Question 2.6 to complete the `Variety` column of the data. Finally, display the completed data table."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Put your code for Question 2.6 here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "###ANSWER\n",
    "wheat_un = pd.read_csv(\"wheat_unclassified.csv\")\n",
    "\n",
    "mask1 = wheat_un[\"Groove Length\"] < 5.6\n",
    "mask2 = (wheat_un[\"Kernel Length\"] - 0.8*wheat_un[\"Groove Length\"]) > 1.28\n",
    "\n",
    "wheat_un.loc[~mask1,\"Variety\"] = \"Rosa\"\n",
    "wheat_un.loc[(mask1 & mask2),\"Variety\"] = \"Kama\"\n",
    "wheat_un.loc[(mask1 & ~mask2),\"Variety\"] = \"Canadian\"\n",
    "\n",
    "wheat_un"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "### &#128721; STOP\n",
    "**Pause to commit your changes to your Git repository!**\n",
    "\n",
    "Take a moment to save your notebook, commit the changes to your Git repository using the commit message \"**Committing Part 2**\", and push the changes to GitHub.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Part 3: Working with a new Python package (15 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###ANSWER (for making sure this gets removed)\n",
    "\n",
    "#### Instructor information\n",
    "\n",
    "The goals for this part of the exam are for students to do the following:\n",
    "\n",
    "1. Do something relatively straight forward with an unfamiliar Python package\n",
    "2. Read and parse documentation to use the new package\n",
    "3. Leverage examples from the documentation to tackle the problem\n",
    "\n",
    "This component of the exam should mirror what they were expected to do in Part 3 of Homework #1. The things students are being asked to do should be pretty simple and **careful attention should be paid to making sure this works on JupyterHub**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this part of the exam, you will install a Python package that you probably have not used before, and use it to perform simple tasks. Specifically, you will use a package called SymPy, which is capable of performing symbolic computations.\n",
    "\n",
    "> Symbolic computation deals with the computation of mathematical objects symbolically. This means that the mathematical objects are represented exactly, not approximately, and mathematical expressions with unevaluated variables are left in symbolic form.\n",
    "\n",
    "For example, SymPy can do computations like \n",
    "\n",
    "$$\\lim_{x \\to 1}\\dfrac{x^2-1}{x-1} = 2$$ \n",
    "\n",
    "$$\\dfrac{d}{dx}x^2e^{3x} = 3x^2e^{3x}+2xe^{3x}$$ \n",
    "\n",
    "$$\\int_{0}^{\\pi}\\cos^2 x\\,dx = \\dfrac{\\pi}{2}$$\n",
    "\n",
    "The documentation for sympy can be found at https://docs.sympy.org/latest/index.html. In particular, the SymPy tutorial section will be very helpful for this part of the exam: https://docs.sympy.org/latest/tutorial/index.html"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 3.1 [2 points]**: It is possible that you already have `sympy` installed since it is part of Anaconda. However, if you don't, you should be able to install the package in the same way we have used previously to install Python packages.\n",
    "\n",
    "**Do this**: Make sure the `sympy` Python package is installed. If it isn't, install it.\n",
    "\n",
    "What command could someone use to install `sympy` if it wasn't already installed? **Include this command in the cell below.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "``` bash\n",
    "# Put the command(s) for installing `sympy` here\n",
    "\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### ANSWER\n",
    "\n",
    "!pip install sympy\n",
    "# or\n",
    "#!pip install --user sympy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once `sympy` is installed, running the following cell should not result in an error message. **You might need to re-start your Jupyter kernel after installing the package for this to work.** (Once everything works, it should give you no output at all.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Running this cell should just work and not yield any output if pydealer is installed and available\n",
    "import sympy"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In Questions 3.2-3.7, you will use the SymPy package to do some symbolic calculations.\n",
    "\n",
    "**Note: You MUST use SymPy to receive credit for Questions 3.2-3.7.**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 3.2 [2 points]**: In the Preliminaries section of the SymPy tutorial, there is an example showing how to use SymPy to symbolically compute $\\int e^x\\cos x\\,dx$. The output of that code looks like this: \n",
    "\n",
    "$\\displaystyle\\int e^x\\cos x\\,dx = \\dfrac{e^x\\sin x}{2}+\\dfrac{e^x\\cos x}{2}$\n",
    "\n",
    "**Do this**: Modify that example to symbolically compute $\\int e^{-2x}\\sin x\\,dx$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Put your code for Question 3.2 here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### ANSWER \n",
    "from sympy import *\n",
    "x = symbols('x')\n",
    "a = Integral(exp(-2*x)*sin(x), x)\n",
    "Eq(a, a.doit())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 3.3 [2 points]**: **Do This**: Use either the `solve` method or the `solveset` method in SymPy to symbolically solve $x^2-x-1 = 0$ for $x$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Put your code for Question 3.3 here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### ANSWER\n",
    "solveset(x**2-x-1,x) # or solve(x**2-x-1,x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 3.4 [2 points]**: **Do This**: Use SymPy to simplify the trigonometric expression $\\sin^4(x)-\\cos^4(x)$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Put your code for Question 3.4 here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "###ANSWER\n",
    "trigsimp(sin(x)**4-cos(x)**4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 3.5 [2 points]**: **Do this**: Use SymPy to symbolically compute the limit $$\\lim_{x \\to 0}\\dfrac{\\cos(x)-1}{x^2}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Put your code for Question 3.5 here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### ANSWER\n",
    "limit((cos(x)-1)/x**2,x,0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 3.6 [3 points]**: **Do this**: Use SymPy to symbolically compute the derivative of $x^7e^{cx}$ with respect to $x$. \n",
    "\n",
    "HINT: You'll need to declare $c$ as a symbol before computing the derivative."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Put your code for Question 3.6 here\n",
    "c = symbols('c')\n",
    "diff(x**7*exp(c*x),x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 3.7 [2 points]**: **Do this**: Use SymPy to symbolically compute the integral $$\\int_{0}^{\\infty}e^{-x^2}\\,dx$$. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Put your code for Question 3.7 here"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "### ANSWER\n",
    "integrate(exp(-x**2),(x,0,oo))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "### &#128721; STOP\n",
    "**Pause to commit your changes to your Git repository!**\n",
    "\n",
    "Take a moment to save your notebook, commit the changes to your Git repository using the commit message \"**Committing Part 3**\", and push the changes to GitHub.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Part 4: Writing and using Python classes (13 points)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###ANSWER (for making sure this gets removed)\n",
    "\n",
    "#### Instructor information\n",
    "\n",
    "The goals for this part of the exam are for students to do the following:\n",
    "\n",
    "1. Add to a pre-built Python object. Try to incorporate the use of Python dictionaries.\n",
    "2. Debug a malfunctioning/broken part of the class.\n",
    "2. Use the python class to demonstrate that the methods are working and that the attributes as being defined and modified correctly, as appropriate.\n",
    "3. Build a new class by inheriting the provided class and demonstrate that it works correctly.\n",
    "\n",
    "This component of the exam should mirror what they were expected to do in Part 3 of Homework #2."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this part of the exam, you will debug and expand a `BankAccount` class, which is used to keep track of the balance of someone's bank account. A `BankAccount` object should have the owner's name as an attribute and be initialized to have a balance of \\$0. `BankAccount` objects should also have methods to print the balance, deposit money, and withdrraw money. \n",
    "\n",
    "After getting this to work, you will create a new `EnhancedBankAccount` class which inherits from the `BankAccount` class, and contains additional functionality in order to keep a ledger of the transaction history."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# DO NOT EDIT THIS CELL\n",
    "# DO NOT EDIT THIS CELL\n",
    "# This cell contains a minimally functional BankAccount class\n",
    "# If you cannot get Question 4.1, you can use this BankAccount class for Question 4.2 \n",
    "class BankAccount:\n",
    "    def __init__(self,name):\n",
    "        self.name = name\n",
    "        self.balance = 0\n",
    "    \n",
    "    def print_balance(self):\n",
    "        print(self.balance)\n",
    "    \n",
    "    def deposit(self,amount):\n",
    "        self.balance += amount\n",
    "        \n",
    "    def withdraw(self,amount):\n",
    "        self.balance -= amount\n",
    "# DO NOT EDIT THIS CELL\n",
    "# DO NOT EDIT THIS CELL"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 4.1 [10 points]**: **Do this**: Debug and expand the `BankAccount` class in the code cell below using the following instructions:\n",
    "\n",
    "* The `__init__()` method should have one argument `name` (along with the argument all class methods have). \n",
    "    * It should create a `BankAccount` object with two attributes: `name` and `balance`. \n",
    "    * The `name` attribute should be initialized to the `name` argument. \n",
    "    * The `balance` attribute should be set to `0`.\n",
    "    * It should print something like \"[NAME] has opened a bank account.\"\n",
    "* The `print_balance()` method should have no arguments (except what all class methods have). \n",
    "    * It should print something like \"[NAME] has \\$[BALANCE] in their bank account.\"\n",
    "* The `deposit()` method should have one argument `amount` (along with the argument all class methods have). \n",
    "    * It should increase the `balance` by `amount`, and then print something like \"\\$[AMOUNT] succesfully deposited into account.\"\n",
    "* The `withdraw()` method should have one argument `amount` (along with the argument all class methods have). \n",
    "    * If the `balance` attribute is at least `amount`, it should decrease `balance` by `amount`, and then print something like \"\\$[AMOUNT] succesfully withdrawn from account.\"\n",
    "    * If the `balance` attribute is less than `amount`, it should print something like \"Error: Bank balance is insufficient.\" and leave the `balance` attribute unchanged."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Edit and expand this Game class\n",
    "class BankAccount:\n",
    "    def __init__(name):\n",
    "        self.name = name\n",
    "        balance = 0\n",
    "        print(name,\" has opened a bank account.\",sep='')\n",
    "        \n",
    "    def print_balance(amount):\n",
    "        print(name,\" has $\",balance,\" in their bank account.\",sep='')\n",
    "    \n",
    "    def deposit():\n",
    "        balance -= self.amount\n",
    "        print(\"$\",self.amount,\" succesfully deposited into account.\",sep='')\n",
    "        \n",
    "    def withdraw():\n",
    "        if(balance <= self.amount):\n",
    "            balance += self.amount\n",
    "            print(\"$\",self.amount,\" succesfully withdrawn from account.\",sep='')\n",
    "        else:\n",
    "            print(\"Error: Bank balance insufficient!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "###ANSWER\n",
    "class BankAccount:\n",
    "    def __init__(self,name):\n",
    "        self.name = name\n",
    "        self.balance = 0\n",
    "        print(name,\" has opened a bank account.\",sep='')\n",
    "        \n",
    "    def print_balance(self):\n",
    "        print(self.name,\" has $\",self.balance,\" in their bank account.\",sep='')\n",
    "    \n",
    "    def deposit(self,amount):\n",
    "        self.balance += amount\n",
    "        print(\"$\",amount,\" succesfully deposited into account.\",sep='')\n",
    "        \n",
    "    def withdraw(self,amount):\n",
    "        if(self.balance >= amount):\n",
    "            self.balance -= amount\n",
    "            print(\"$\",amount,\" succesfully withdrawn from account.\",sep='')\n",
    "        else:\n",
    "            print(\"Error: Bank balance insufficient!\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Do this**: When you are done editing the `BankAccount` class, you can run the cell below to test it out. Your output should look like this:\n",
    "\n",
    "```\n",
    "Bob has opened a bank account.\n",
    "Bob has $0 in their bank account.\n",
    "$100 succesfully deposited into account.\n",
    "Bob has $100 in their bank account.\n",
    "$100 succesfully withdrawn from account.\n",
    "Bob has $0 in their bank account.\n",
    "$25 succesfully deposited into account.\n",
    "Bob has $25 in their bank account.\n",
    "Error: Bank balance insufficient!\n",
    "Bob has $25 in their bank account.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# DO NOT EDIT THIS CELL\n",
    "# DO NOT EDIT THIS CELL\n",
    "account = BankAccount(\"Bob\")\n",
    "account.print_balance()\n",
    "account.deposit(100)\n",
    "account.print_balance()\n",
    "account.withdraw(100)\n",
    "account.print_balance()\n",
    "account.deposit(25)\n",
    "account.print_balance()\n",
    "account.withdraw(400)\n",
    "account.print_balance()\n",
    "# DO NOT EDIT THIS CELL\n",
    "# DO NOT EDIT THIS CELL"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Question 4.2 [12 points]**: **Do this**: Create a second class called `EnhancedBankAccount` that **inherits** the `BankAccount` class and then adds new functionality as described below. Put this new class in the code cell below. If you were not able to get the `BankAccount` class working, you can still receive credit on this question by using the minimally functional `BankAccount` class that was provided in the first code cell of Part 4.\n",
    "\n",
    "This new `EnhancedBankAccount` class should have the following specifications:\n",
    "* The `__init__()` method should have one argument `name` (in addition to what all class methods have).\n",
    "    * It should call `BankAccount`'s `__init__()` method with the appropriate arguments to initialize a `BankAccount` object\n",
    "    * It should also create a new attribute called `ledger`, and initialize that attribute to be `[[\"Starting Balance\",0,0]]`. **Note that this is a list which itself contains a list.** \n",
    "* The `transaction()` method should have two arguments `amount` and `description` (in addition to what all class methods have). \n",
    "    * The `description` argument should be optional, and have a default value of `\"\"` (an empty string).\n",
    "    * If the `amount` is positive, this method should call the `BankAccount` method `deposit()` with the appropriate argument(s) to deposit `amount` into the account. \n",
    "    * If the `amount` is negative, this method should call the `BankAccount` method `withdraw()` with the appropriate argument(s) to withdraw `-amount` into the account. **Note that you'll need to negate the value of `amount` since the `BankAccount` method `withdraw()` is designed for positive input values.**\n",
    "    * After updating the balance via either the `deposit()` or `withdraw()` methods, this method should create a three element list with the `description`, the `amount`, and the updated `balance` attributes in that order, and then append this three element list to the `ledger` attribute. \n",
    "    \n",
    "Note that the `balance` attribute should be updated by the `BankAccount` methods `deposit()` and `withdraw()`, not by this class's methods directly. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Put your code for the EnhancedBankAccount class in this cell\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "###ANSWER\n",
    "class EnhancedBankAccount(BankAccount):\n",
    "    def __init__(self,name):\n",
    "        super().__init__(name)\n",
    "        self.ledger = [[\"Starting Balance\",0,0]]\n",
    "        \n",
    "    def transaction(self,amount,description=\"\"):\n",
    "        if(amount > 0):\n",
    "            self.deposit(amount)\n",
    "        else:\n",
    "            self.withdraw(-amount)\n",
    "            \n",
    "        self.ledger.append([description,amount,self.balance])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "&#9989; **Do this**: When you are done editing the EnhancedBankAccount class, run the cell below to test it out."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# DO NOT EDIT THIS CELL\n",
    "# DO NOT EDIT THIS CELL\n",
    "enhanced_account = EnhancedBankAccount(\"Bob\")\n",
    "enhanced_account.transaction(1000,\"First Paycheck. Woooo!\")\n",
    "enhanced_account.transaction(-1000,\"Rent :/\")\n",
    "enhanced_account.transaction(250,\"Bet on the Michigan State Spartans :)\")\n",
    "enhanced_account.transaction(-50)\n",
    "enhanced_account.transaction(1000,\"Second Paycheck\")\n",
    "enhanced_account.transaction(-400,\"Bet on the Detroit Lions :(\")\n",
    "import pandas as pd\n",
    "pd.DataFrame(enhanced_account.ledger,columns=[\"Description\",\"Amount\",\"Running Balance\"])\n",
    "# DO NOT EDIT THIS CELL\n",
    "# DO NOT EDIT THIS CELL"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If you got everything working, you should see a ledger (displayed as a Pandas DataFrame) with 7 transactions (numbered 0-6). The 4th row has a blank description, and the last row has a running balance of \\$800. If you got Question 4.1 working, there will also be some text above the ledger."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "### &#128721; STOP\n",
    "**Pause to commit your changes to your Git repository!**\n",
    "\n",
    "Take a moment to save your notebook, commit the changes to your Git repository using the commit message \"**Committing Part 4**\", and push the changes to GitHub.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### &#128721; STOP (again)\n",
    "One last step: If you created a new branch to work on the midterm exam, merge your `midterm_branch` with your main/master branch, and push this change up to GitHub. Don't do this step unless either you are done with the midterm or there are only a few minutes left until the end of class."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## You're done! Congrats on finishing your CMSE 202 Midterm!\n",
    "\n",
    "Make sure all of your changes to your repository are committed and pushed to GitHub. Also upload a copy of this notebook to the dropbox on D2L in case something went wrong with your repository or if you couldn't get the repository to work."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
